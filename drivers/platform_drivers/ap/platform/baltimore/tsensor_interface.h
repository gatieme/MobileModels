#ifndef __TSENSOR_INTERFACE_H__
#define __TSENSOR_INTERFACE_H__ 
#define TSENS_TEMP_START_VALUE (-40)
#define TSENS_TEMP_END_VALUE 125
#define TSENS_ADC_START_VALUE 464
#define TSENSOR_ADC_MAX 780
#define TSC_MODE_DISABLE_DELAY 0xA
#define REMOTE_DEFAULT_VALUE 0x206
#define TSENSOR_SAMPLE_NUM 0x10
#define DEF_ROOM_TEMPERATURE 20
enum sensor_idx {
 LITTLE_SENSOR = 0,
 MIDDLE_SENSOR,
 BIG_SENSOR,
 GPU_SENSOR,
 MODEM_SENSOR,
 NPU_SENSOR,
 PERI_SENSOR,
 SEC_SENSOR,
 TSENSOR_NUM_MAX,
 UNKNOWN_SENSOR = TSENSOR_NUM_MAX,
};
enum sensor_table {
 LOCAL_SENSOR_M0 = 0,
 BIG_SENSOR_0,
 MIDDLE_SENSOR_0,
 MIDDLE_SENSOR_1,
 MIDDLE_SENSOR_2,
 FCM0_SENSOR,
 ARPP_SENSOR,
 IVP_SENSOR,
 REMOTE_SENSOR_MAX_NUM,
 LOCAL_SENSOR_M1 = REMOTE_SENSOR_MAX_NUM,
 NCSI_SENSOR,
 NCHE_SENSOR,
 NPDT_SENSOR,
 MDM0_SENSOR,
 MDM1_SENSOR,
 RES_SENSOR_0,
 RES_SENSOR_1,
 LOCAL_SENSOR_M2,
 GPU_SENSOR_0,
 GPU_SENSOR_1,
 NPU0_SENSOR,
 NPU1_SENSOR,
 ISP_SENSOR,
 FCM1_SENSOR,
 SENSOR_UNKNOWN_MAX,
};
enum m_idx {
 M_0 = 0,
 M_1,
 M_2,
 M_MAX,
 UNKNOWN_M = M_MAX,
};
#define temp2adc(temp) (((temp) - TSENS_TEMP_START_VALUE) * (TSENSOR_ADC_MAX - TSENS_ADC_START_VALUE) / \
 (TSENS_TEMP_END_VALUE - TSENS_TEMP_START_VALUE) + TSENS_ADC_START_VALUE)
#define adc2temp(adc) (((adc) - TSENS_ADC_START_VALUE) * (TSENS_TEMP_END_VALUE - TSENS_TEMP_START_VALUE) / \
 (TSENSOR_ADC_MAX - TSENS_ADC_START_VALUE) + TSENS_TEMP_START_VALUE)
signed char get_tsensor_temp(enum sensor_table id);
#endif
