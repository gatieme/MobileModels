#ifndef __TSENSOR_INTERFACE_H__
#define __TSENSOR_INTERFACE_H__ 
#ifdef __cplusplus
    #if __cplusplus
        extern "C" {
    #endif
#endif
#define TSENS_TEMP_START_VALUE (-40)
#define TSENS_TEMP_END_VALUE (125)
#define TSENS_ADC_START_VALUE (426)
#define TSENSOR_ADC_MAX (721)
#define TSENSOR_DELTA_VAL (-5)
#define TSC_MODE_DISABLE_DELAY (0xFF)
#define REMOTE_DEFAULT_VALUE 0x206
#define TSENS_TEMP_START_VALUE1 (-20)
#define TSENS_TEMP_END_VALUE1 (105)
#define TSENS_ADC_START_VALUE1 (518)
#define TSENSOR_ADC_MAX1 (711)
#define TSENSOR_DELTA_VAL1 (0)
#define TSENS_TEMP_START_VALUE2 (-20)
#define TSENS_TEMP_END_VALUE2 (105)
#define TSENS_ADC_START_VALUE2 (509)
#define TSENSOR_ADC_MAX2 (713)
#define TSENSOR_DELTA_VAL2 (0)
#define TSENSOR_SAMPLE_NUM 0x10
#define DEF_ROOM_TEMPERATURE 20
#define EFUSE_TSENSOR_VERSION_START 1618
#define EFUSE_TSENSOR_VERSION_SIZE 3
#define TSENSOR_VERSION_MASK 0x7
#define VERSION_V120_VALUE_1 1
#define VERSION_V120_VALUE_2 2
enum TSENSOR_VERSION {
 TSENSOR_VERSION_0,
 TSENSOR_VERSION_1,
 TSENSOR_VERSION_2,
 TSENSOR_VERSION_MAX,
};
enum sensor_idx {
 LITTLE_SENSOR = 0,
 MIDDLE_SENSOR,
 BIG_SENSOR,
 GPU_SENSOR,
 MODEM_SENSOR,
 NPU_SENSOR,
 PERI_SENSOR,
 TSENSOR_NUM_MAX,
 UNKNOWN_SENSOR = TSENSOR_NUM_MAX,
};
enum sensor_table {
 LOCAL_SENSOR_M0 = 0,
 MEDIAL_SENSOR,
 GPU_SENSOR_0,
 FCM0_SENSOR,
 FCM1_SENSOR,
 MDM0_SENSOR,
 PDF_SENSOR,
 NPU_SENSOR_0,
 REMOTE_SENSOR_MAX_NUM,
 SENSOR_UNKNOWN_MAX = REMOTE_SENSOR_MAX_NUM,
};
enum m_idx {
 M_0 = 0,
 M_MAX,
 UNKNOWN_M,
};
#define temp2adc(temp) (((temp) - TSENS_TEMP_START_VALUE - TSENSOR_DELTA_VAL)*(TSENSOR_ADC_MAX-TSENS_ADC_START_VALUE)/(TSENS_TEMP_END_VALUE-TSENS_TEMP_START_VALUE) + \
  TSENS_ADC_START_VALUE)
#define adc2temp(adc) (((adc) - TSENS_ADC_START_VALUE) * (TSENS_TEMP_END_VALUE-TSENS_TEMP_START_VALUE) / (TSENSOR_ADC_MAX-TSENS_ADC_START_VALUE) + \
  TSENS_TEMP_START_VALUE + TSENSOR_DELTA_VAL)
#define temp2adc_v1(temp) (((temp) - TSENS_TEMP_START_VALUE1 - TSENSOR_DELTA_VAL1)*(TSENSOR_ADC_MAX1-TSENS_ADC_START_VALUE1)/(TSENS_TEMP_END_VALUE1-TSENS_TEMP_START_VALUE1) + \
  TSENS_ADC_START_VALUE1)
#define adc2temp_v1(adc) (((adc) - TSENS_ADC_START_VALUE1) * (TSENS_TEMP_END_VALUE1-TSENS_TEMP_START_VALUE1) / (TSENSOR_ADC_MAX1-TSENS_ADC_START_VALUE1) + \
  TSENS_TEMP_START_VALUE1 + TSENSOR_DELTA_VAL1)
#define temp2adc_v2(temp) (((temp) - TSENS_TEMP_START_VALUE2 - TSENSOR_DELTA_VAL2)*(TSENSOR_ADC_MAX2-TSENS_ADC_START_VALUE2)/(TSENS_TEMP_END_VALUE2-TSENS_TEMP_START_VALUE2) + \
  TSENS_ADC_START_VALUE2)
#define adc2temp_v2(adc) (((adc) - TSENS_ADC_START_VALUE2) * (TSENS_TEMP_END_VALUE2-TSENS_TEMP_START_VALUE2) / (TSENSOR_ADC_MAX2-TSENS_ADC_START_VALUE2) + \
  TSENS_TEMP_START_VALUE2 + TSENSOR_DELTA_VAL2)
#define temp2adc_diff(temp) ((TSENSOR_ADC_MAX-TSENS_ADC_START_VALUE) * (temp)/(TSENS_TEMP_END_VALUE-TSENS_TEMP_START_VALUE))
#define temp2adc_diff_v1(temp) ((TSENSOR_ADC_MAX1-TSENS_ADC_START_VALUE1) * (temp)/(TSENS_TEMP_END_VALUE1-TSENS_TEMP_START_VALUE1))
#define temp2adc_diff_v2(temp) ((TSENSOR_ADC_MAX2-TSENS_ADC_START_VALUE2) * (temp)/(TSENS_TEMP_END_VALUE2-TSENS_TEMP_START_VALUE2))
#ifdef __cplusplus
    #if __cplusplus
        }
    #endif
#endif
#endif
